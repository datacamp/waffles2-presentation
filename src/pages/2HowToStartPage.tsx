import { css } from '@emotion/react';

import { tokens } from '@datacamp/waffles/tokens';
import { Heading } from '@datacamp/waffles/heading';
import { Paragraph } from '@datacamp/waffles/paragraph';
import { Code } from '@datacamp/waffles/code';
import { ContentContainer } from '@datacamp/waffles/content-container';

import Layout from '../components/Layout';

const darkModeStyle = css`
  background-color: ${tokens.colors.navy};
`;

const darkModeContentContainer = css`
  height: 100vh;
`;

function HowToStartPage() {
  return <Layout prevUrl="/what-to-do" nextUrl="/button-and-link">
      <ContentContainer noSidebar>
        <Heading size="xxlarge">How To Start?</Heading>
        <Paragraph>ℹ️ When in doubt check <strong>examples in docs</strong>.</Paragraph>
        <Paragraph>ℹ️ In general going with <strong>defaults</strong> should work just fine.</Paragraph>
        <Paragraph>ℹ️ Most components has opaque API and accept props their native counterparts would, like <Code>data-</Code> and <Code>aria-</Code> attributes.</Paragraph>
        <Paragraph>I would suggest wrapping main content of an app with <Code>ContentContainer</Code> component to standarize how it behaves across apps.</Paragraph>
        <Paragraph>After that <Code>Button</Code>, <Code>Tooltip</Code>, <Code>Link</Code>, and text elements are good candidates to replace.</Paragraph>
        <Paragraph>Would be great to replace existing media queries with the ones generated by <Code>mediaQuery</Code> helper.</Paragraph>
      </ContentContainer>
      <div css={darkModeStyle}>
      <ContentContainer noSidebar css={darkModeContentContainer}>
        <Heading size="large" inverted>Oh btw, there is also dark mode for each component.</Heading>
        <Paragraph inverted>Enable it by passing <Code inverted>inverted</Code> flag. Unfortunately, it's not really ergonomic yet.</Paragraph>
      </ContentContainer>
      </div>
    </Layout>;
}

export default HowToStartPage;
